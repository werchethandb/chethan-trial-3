# This script checks for versioning type and takes necessary action to bump the package version accordingly
# Script needs permission to checkout repo and hence need a GH_PERSONAL_ACCESS_TOKEN
# Script also needs permission to publish and hence need a GITHUB_TOKEN (auto-generated)

name: Version Increment

on:
  push:
    branches:
      - main

jobs:
  version_type_finder:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      vtype: ${{ steps.DetermineVersionType.outputs.versiontype }}
    if: "!startsWith(github.event.head_commit.message, '[RELEASE]')"
    steps:
      - name: check for MAJOR version
        if: "contains(github.event.head_commit.message, '[MAJOR]')"
        run: |
          echo "VERSION_TYPE=major" >> $GITHUB_ENV

      - name: check for MINOR version
        if: "contains(github.event.head_commit.message, '[MINOR]')"
        run: |
          echo "VERSION_TYPE=minor" >> $GITHUB_ENV

      - name: check for PATCH version
        if: "contains(github.event.head_commit.message, '[PATCH]')"
        run: |
          echo "VERSION_TYPE=patch" >> $GITHUB_ENV

      - name: check for UNDEFINED version
        if: ${{ env.VERSION_TYPE == '' }}
        run: |
          echo "VERSION_TYPE=undefined" >> $GITHUB_ENV

      - id: DetermineVersionType
        name: versioning type
        run: echo "versiontype=${{ env.VERSION_TYPE }}" >> $GITHUB_OUTPUT

      - name: Fail step if its UNDEFINED version type
        if: ${{ env.VERSION_TYPE == 'undefined' }}
        run: |
          echo "Failing further steps since there wasn't a build version type which was determined."
          echo "If the intention was to bump the pkg version then make sure to tag (ex: [PATCH]) your PR commit message as per 'commit instructions' under readme"  
          exit 1 # fails the job

  bump_pkg_version:
    runs-on: ubuntu-latest
    needs: version_type_finder
    if: ${{ needs.version_type_finder.outputs.vtype != 'undefined' }}
    steps:
      - name: checkout code base
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

      - name: cache node modules
        id: cache_node_modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: bump the version
        run: echo 'Start package versioning for ${{ needs.version_type_finder.outputs.vtype }}'

      - name: install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: build and bump the version
        run: |
          npm run-script build                 # builds the angular library
          git config --global user.name 'werchethandb'
          git config --global user.email 'chethan.balakrishna@werner.com'
          cd projects/angular-components-lib
          npm version ${{ needs.version_type_finder.outputs.vtype }}
          git add .
          git commit -m '[RELEASE] Bumped version'
          git push "https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
